{"version":3,"sources":["view/App.tsx","helper/CsvParser.tsx","helper/JsonDownloader.tsx","index.tsx"],"names":["App","useState","tableName","setTableName","csvText","setCsvText","jsonConverted","setJsonConverted","className","type","placeholder","value","onChange","e","target","onClick","lines","split","length","trim","headersArray","headersData","regexMatch","regex","headers","exec","index","lastIndex","header","name","push","extractHeaderData","convertedText","dynamoObj","slice","forEach","d","i","lineData","put","Item","TableName","l","JSON","parse","Object","keys","Put","stringify","convertCsvToDynamoObjects","fileName","content","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","convertAndDownloadFile","mode","theme","readOnly","width","height","ReactDOM","render","StrictMode","getElementById"],"mappings":"+SAoEeA,MA3Df,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,KAsBb,OACE,yBAAKC,UAAU,OACb,gEAEA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,2BAAOC,KAAK,OAAOC,YAAY,aAC7BC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAaU,EAAEC,OAAOH,UAEzC,4BAAQI,QA5BlB,WACE,IAAMC,EAAQZ,EAAQa,MAAM,MAC5B,GAAqB,IAAjBD,EAAME,QAA4C,IAA5BhB,EAAUiB,OAAOD,OAA3C,CAGA,IAAIE,ECaD,SACLC,GAMA,IAJA,IAGIC,EAHEC,EAAQ,yBAEVC,EAAoB,GAE0B,QAA1CF,EAAaC,EAAME,KAAKJ,KAAwB,CAElDC,EAAWI,QAAUH,EAAMI,WAC7BJ,EAAMI,YAGR,IAAIC,EAAiB,CAAEC,KAAMP,EAAW,GAAIb,KAAMa,EAAW,IAC7DE,EAAQM,KAAKF,GAEf,OAAOJ,ED7BcO,CAAkBf,EAAM,IACvCgB,ECjBD,SACLhB,EACAd,EACAsB,GAEA,IAAIS,EAA0B,GAqB9B,OAnBajB,EAAMkB,MAAM,GACpBC,SAAQ,SAACC,EAAGC,GAEf,IACMC,EAAWF,EAAEnB,MADL,kCAEVsB,EAAW,CAAEC,KAAM,GAAIC,UAAWvC,GACtCoC,EAASH,SAAQ,SAACO,EAAGhB,GAEnB,IAAMf,EAAQ+B,EAAEvB,OAASwB,KAAKC,MAAMF,GAAGvB,OAAS,GAChD,GAAqB,IAAjBR,EAAMO,OAAV,CAEA,IAAMU,EAASJ,EAAQE,GACvBa,EAAIC,KAAKZ,EAAOC,MAAhB,eAA0BD,EAAOnB,KAAOE,OAGvCkC,OAAOC,KAAKP,EAAIC,MAAMtB,OAAS,IAChCe,EAAUI,GAAK,CAAEU,IAAKR,OAGnBI,KAAKK,UAAUf,EAAW,KAAM,MDTjBgB,CAA0BjC,EAAOd,EAAWkB,GAEhEb,EAAiByB,MAoBT,gBAEF,8BACErB,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOH,WAGzC,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,WACb,4BAAQO,QA1BlB,WACsC,IAAhCT,EAAca,OAAOD,QE1Bd,SACbgC,EACAC,GAEE,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,gCAAkCC,mBAAmBL,IAClFC,EAAQG,aAAa,WAArB,UAAoCL,EAApC,UACAE,EAAQK,MAAMC,QAAU,OAExBL,SAASM,KAAKC,YAAYR,GAC1BA,EAAQS,QACRR,SAASM,KAAKG,YAAYV,GFiB1BW,CAAuB7D,EAAWI,KAuB1B,kBAEF,kBAAC,IAAD,CACE0D,KAAK,OACLC,MAAM,WACNC,UAAU,EACVvD,MAAOL,EACP6D,MAAO,OACPC,OAAQ,OACR5D,UAAW,wBGvDvB6D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,W","file":"static/js/main.a2f9eddc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport \"./App.scss\";\nimport { convertCsvToDynamoObjects, extractHeaderData } from \"../helper/CsvParser\";\nimport convertAndDownloadFile from \"../helper/JsonDownloader\";\n\nfunction App() {\n  const [tableName, setTableName] = useState(\"\");\n  const [csvText, setCsvText] = useState(\"\");\n  const [jsonConverted, setJsonConverted] = useState(\"\");\n\n  function convertText() {\n    const lines = csvText.split(\"\\n\");\n    if (lines.length === 0 || tableName.trim().length === 0) return;\n    \n    // First line must be Headers data, Ie: \"Pk (S)\", \"Sk (S)\", \"Name (S)\", \"Amount (N)\"\n    let headersArray = extractHeaderData(lines[0])\n    let convertedText = convertCsvToDynamoObjects(lines, tableName, headersArray)\n\n    setJsonConverted(convertedText)\n  }\n\n  function downloadJsonFile() {\n    if (jsonConverted.trim().length === 0) return;\n\n    convertAndDownloadFile(tableName, jsonConverted)\n  }\n\n  return (\n    <div className=\"App\">\n      <header>Convert CSV to DynamoDB JSON</header>\n      \n      <div className=\"editor-boxes\">\n        <div className=\"left-editor\">\n          <div className=\"configs\">\n            <input type=\"text\" placeholder=\"Table Name\" \n              value={tableName} \n              onChange={(e) => setTableName(e.target.value)}\n            />\n            <button onClick={convertText}>Convert CSV</button>\n          </div>\n          <textarea\n            value={csvText}\n            onChange={(e) => setCsvText(e.target.value)}\n          />\n        </div>\n        <div className=\"right-editor\">\n          <div className=\"configs\">\n            <button onClick={downloadJsonFile}>Download JSON</button>\n          </div>\n          <AceEditor\n            mode=\"json\"\n            theme=\"tomorrow\"\n            readOnly={true}\n            value={jsonConverted}\n            width={\"100%\"}\n            height={\"100%\"}\n            className={\"aceEditorCustom\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import Header from \"../model/Header\";\r\nimport { Put, DynamoRoot } from \"../model/DynamoPut\";\r\n\r\nexport function convertCsvToDynamoObjects(\r\n  lines: string[],\r\n  tableName: string,\r\n  headers: Header[]) : string {\r\n\r\n  let dynamoObj: DynamoRoot[] = []\r\n\r\n  const data = lines.slice(1);\r\n  data.forEach((d, i) => {\r\n    // Regex: Split all commas, ignoring the ones inside strings\r\n    const regex = /,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/g;\r\n    const lineData = d.split(regex);\r\n    let put: Put = { Item: {}, TableName: tableName}\r\n    lineData.forEach((l, index) => {\r\n      \r\n      const value = l.trim() ? JSON.parse(l).trim() : ''\r\n      if (value.length === 0) return;\r\n      \r\n      const header = headers[index]\r\n      put.Item[header.name] = {[header.type]: value}\r\n    });\r\n    \r\n    if(Object.keys(put.Item).length > 0)\r\n      dynamoObj[i] = { Put: put }\r\n  });\r\n  \r\n  return JSON.stringify(dynamoObj, null, '\\t')\r\n}\r\n\r\nexport function extractHeaderData(\r\n  headersData: string) : Header[] {\r\n  \r\n  const regex = /([a-zA-Z]*)\\s\\((\\w)\\)/g;\r\n\r\n  let headers: Header[] = []\r\n  let regexMatch;\r\n  while ((regexMatch = regex.exec(headersData)) !== null) {\r\n    // This is necessary to avoid infinite loops with zero-width matches\r\n    if (regexMatch.index === regex.lastIndex) {\r\n      regex.lastIndex++;\r\n    }\r\n\r\n    let header: Header = { name: regexMatch[1], type: regexMatch[2]}\r\n    headers.push(header);\r\n  }\r\n  return headers;\r\n}","export default function convertAndDownloadFile(\r\n  fileName: string, \r\n  content: string) : void {\r\n\r\n    let element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/json;charset=utf-8,' + encodeURIComponent(content));\r\n    element.setAttribute('download', `${fileName}.json`);\r\n    element.style.display = 'none';\r\n    \r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './view/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}