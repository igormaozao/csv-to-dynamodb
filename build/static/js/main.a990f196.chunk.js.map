{"version":3,"sources":["view/App.tsx","index.tsx"],"names":["App","useState","tableName","setTableName","csvText","setCsvText","jsonConverted","setJsonConverted","headers","setHeaders","className","type","placeholder","value","onChange","e","target","onClick","lines","split","length","trim","headerData","regexMatch","regex","exec","index","lastIndex","header","name","push","extractHeaderData","dynamoObj","slice","forEach","d","i","lineData","put","Item","TableName","l","JSON","parse","Object","keys","Put","stringify","mode","theme","readOnly","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SA8FeA,MArFf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIiBN,mBAAmB,IAJpC,mBAINO,EAJM,KAIGC,EAJH,KAoDb,OACE,yBAAKC,UAAU,OACb,gEACA,yBAAKA,UAAU,WACb,2BAAOC,KAAK,OAAOC,YAAY,aAC7BC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAaY,EAAEC,OAAOH,UAEzC,4BAAQI,QAtDd,WACE,IAAMC,EAAQd,EAAQe,MAAM,MAC5B,GAAqB,IAAjBD,EAAME,QAA4C,IAA5BlB,EAAUmB,OAAOD,OAA3C,EA4BF,SAA2BE,GACzB,IAEIC,EAFEC,EAAQ,yBAGd,KAAiD,QAAzCD,EAAaC,EAAMC,KAAKH,KAAuB,CAEjDC,EAAWG,QAAUF,EAAMG,WAC7BH,EAAMG,YAGR,IAAIC,EAAiB,CAAEC,KAAMN,EAAW,GAAIZ,KAAMY,EAAW,IAC7Df,EAAQsB,KAAKF,GACbnB,EAAWD,IAtCbuB,CAAkBb,EAAM,IAExB,IAAIc,EAA0B,GAEjBd,EAAMe,MAAM,GACpBC,SAAQ,SAACC,EAAGC,GAEf,IACMC,EAAWF,EAAEhB,MADL,kCAEVmB,EAAW,CAAEC,KAAM,GAAIC,UAAWtC,GACtCmC,EAASH,SAAQ,SAACO,EAAGf,GAEnB,IAAMb,EAAQ4B,EAAEpB,OAASqB,KAAKC,MAAMF,GAAGpB,OAAS,GAChD,GAAqB,IAAjBR,EAAMO,OAAV,CAEA,IAAMQ,EAASpB,EAAQkB,GACvBY,EAAIC,KAAKX,EAAOC,MAAhB,eAA0BD,EAAOjB,KAAOE,OAGvC+B,OAAOC,KAAKP,EAAIC,MAAMnB,OAAS,IAChCY,EAAUI,GAAK,CAAEU,IAAKR,OAG1B/B,EAAiBmC,KAAKK,UAAUf,EAAW,KAAM,UA2B7C,gBAEF,yBAAKtB,UAAU,gBACb,yBAAKA,UAAU,eACb,8BACEG,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAWU,EAAEC,OAAOH,WAGzC,yBAAKH,UAAU,gBACb,kBAAC,IAAD,CACEsC,KAAK,OACLC,MAAM,WACNC,UAAU,EACVrC,MAAOP,EACP6C,MAAO,OACPC,OAAQ,OACR1C,UAAW,wBCjFvB2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a990f196.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport AceEditor from \"react-ace\";\nimport Header from \"../model/Header\";\nimport { Put, DynamoRoot } from \"../model/DynamoPut\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [tableName, setTableName] = useState(\"\");\n  const [csvText, setCsvText] = useState(\"\");\n  const [jsonConverted, setJsonConverted] = useState(\"\");\n  const [headers, setHeaders] = useState<Header[]>([]);\n\n  function convertText() {\n    const lines = csvText.split(\"\\n\");\n    if (lines.length === 0 || tableName.trim().length === 0) return;\n\n    extractHeaderData(lines[0]);\n\n    let dynamoObj: DynamoRoot[] = []\n\n    const data = lines.slice(1);\n    data.forEach((d, i) => {\n      // Regex: Split all commas, ignoring the ones inside strings\n      const regex = /,(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/g;\n      const lineData = d.split(regex);\n      let put: Put = { Item: {}, TableName: tableName}\n      lineData.forEach((l, index) => {\n        \n        const value = l.trim() ? JSON.parse(l).trim() : ''\n        if (value.length === 0) return;\n        \n        const header = headers[index]\n        put.Item[header.name] = {[header.type]: value}\n      });\n      \n      if(Object.keys(put.Item).length > 0)\n        dynamoObj[i] = { Put: put }\n    });\n    \n    setJsonConverted(JSON.stringify(dynamoObj, null, '\\t'))\n  }\n\n  function extractHeaderData(headerData: string) {\n    const regex = /([a-zA-Z]*)\\s\\((\\w)\\)/g;\n\n    let regexMatch;\n    while ((regexMatch = regex.exec(headerData)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (regexMatch.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      let header: Header = { name: regexMatch[1], type: regexMatch[2]}\n      headers.push(header);\n      setHeaders(headers);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>Convert CSV to DynamoDB JSON</header>\n      <div className=\"configs\">\n        <input type=\"text\" placeholder=\"Table Name\" \n          value={tableName} \n          onChange={(e) => setTableName(e.target.value)}\n        />\n        <button onClick={convertText}>Convert CSV</button>\n      </div>\n      <div className=\"editor-boxes\">\n        <div className=\"left-editor\">\n          <textarea\n            value={csvText}\n            onChange={(e) => setCsvText(e.target.value)}\n          />\n        </div>\n        <div className=\"right-editor\">\n          <AceEditor\n            mode=\"json\"\n            theme=\"tomorrow\"\n            readOnly={true}\n            value={jsonConverted}\n            width={\"100%\"}\n            height={\"100%\"}\n            className={\"aceEditorCustom\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './view/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}